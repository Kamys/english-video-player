{"version":3,"file":"SubtitleContainer.js","sourceRoot":"","sources":["../../src/components/SubtitleContainer.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,WAAW,EAAE,MAAM,OAAO,CAAA;AAC1C,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAA;AACrC,OAAO,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAA;AAC/C,OAAO,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAA;AACzC,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAA;AAC9C,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAA;AAKvC,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAC,MAAM,CAAA;AAEjC,MAAM,CAAC,MAAM,iBAAiB,GAAoB,GAAG,EAAE;IACnD,MAAM,EAAE,kBAAkB,EAAE,MAAM,EAAE,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;IAC7D,MAAM,EAAE,eAAe,EAAE,gBAAgB,EAAE,GAAG,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;IACxE,MAAM,EACF,kBAAkB,EAClB,gCAAgC,EAChC,+BAA+B,EAC/B,oBAAoB,EACpB,qBAAqB,GACxB,GAAG,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAA;IAEtC,MAAM,eAAe,GAAG,WAAW,CAAC,CAAC,IAAY,EAAE,EAAE;QACjD,OAAO,EAAE,CAAA;QACT,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;IACvC,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAA;IAEb,IAAI,CAAC,kBAAkB,EAAE;QACrB,OAAO,IAAI,CAAA;KACd;IAED,OAAO,CACH,6BAAK,SAAS,EAAC,oBAAoB;QAC9B,eAAe,IAAI,6BAAK,SAAS,EAAC,WAAW;YACzC,eAAe;YAChB;gBACI,2BACI,MAAM,EAAC,QAAQ,EACf,IAAI,EAAE,0DAA0D,GAAG,gBAAgB,EACnF,GAAG,EAAC,YAAY,6DAEhB,CACF,CACJ;QACL,qBAAqB,IAAI,oBAAC,QAAQ,IAC/B,SAAS,EAAE,gCAAgC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAC5D,WAAW,EAAE,IAAI,EACjB,kBAAkB,EAAE,kBAAkB,EACtC,OAAO,EAAC,IAAI,GACd;QACD,oBAAoB,IAAI,oBAAC,QAAQ,IAC9B,SAAS,EAAE,+BAA+B,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAC3D,WAAW,EAAE,eAAe,EAC5B,kBAAkB,EAAE,kBAAkB,EACtC,OAAO,EAAC,IAAI,GACd,CACA,CACT,CAAA;AACL,CAAC,CAAA","sourcesContent":["import React, { useCallback } from 'react'\nimport { Subtitle } from './Subtitle'\nimport { $translate } from '../store/translate'\nimport { useStore } from 'effector-react'\nimport { $settings } from '../store/settrings'\nimport { $video } from '../store/video'\n\ninterface Props {\n}\n\nconst { onPause } = $video.action\n\nexport const SubtitleContainer: React.FC<Props> = () => {\n    const { currentMillisecond, isPlay } = useStore($video.store)\n    const { translateResult, textForTranslate } = useStore($translate.store)\n    const {\n        isDisplaySubtitles,\n        isDisplayRusSubtitlesOnlyOnPause,\n        isDisplayEnSubtitlesOnlyOnPause,\n        isDisplayEnSubtitles,\n        isDisplayRusSubtitles,\n    } = useStore($settings.store.settings)\n\n    const handleTranslate = useCallback((word: string) => {\n        onPause()\n        $translate.action.onTranslate(word)\n    }, [onPause])\n\n    if (!isDisplaySubtitles) {\n        return null\n    }\n\n    return (\n        <div className='subtitle-container'>\n            {translateResult && <div className='translate'>\n                {translateResult}\n                <div>\n                    <a\n                        target='_blank'\n                        href={'https://context.reverso.net/translation/english-russian/' + textForTranslate}\n                        rel='noreferrer'>\n                        Подробнее\n                    </a>\n                </div>\n            </div>}\n            {isDisplayRusSubtitles && <Subtitle\n                isDisplay={isDisplayRusSubtitlesOnlyOnPause ? !isPlay : true}\n                onTranslate={null}\n                currentMillisecond={currentMillisecond}\n                langKey='ru'\n            />}\n            {isDisplayEnSubtitles && <Subtitle\n                isDisplay={isDisplayEnSubtitlesOnlyOnPause ? !isPlay : true}\n                onTranslate={handleTranslate}\n                currentMillisecond={currentMillisecond}\n                langKey='en'\n            />}\n        </div>\n    )\n}"]}