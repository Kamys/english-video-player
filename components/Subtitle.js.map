{"version":3,"file":"Subtitle.js","sourceRoot":"","sources":["../../src/components/Subtitle.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAM,WAAW,EAAE,MAAM,OAAO,CAAA;AAC9C,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAA;AAC7B,OAAO,EAAE,kBAAkB,EAAE,MAAM,UAAU,CAAA;AAa7C,MAAM,CAAC,MAAM,QAAQ,GAAc,CAAC,EAAE,WAAW,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE,EAAE;IACvE,MAAM,WAAW,GAAG,kBAAkB,CAAC,OAAO,CAAC,EAAE,IAAI,CAAA;IAErD,MAAM,WAAW,GAAG,WAAW,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE;QAC5C,CAAC,CAAC,eAAe,EAAE,CAAA;QACnB,CAAC,CAAC,cAAc,EAAE,CAAA;QAClB,WAAW,CAAC,IAAI;aACX,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC;aACnB,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC;aACnB,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC;aACnB,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,CACvB,CAAA;IACL,CAAC,EAAE,EAAE,CAAC,CAAA;IAEN,MAAM,kBAAkB,GAAG,WAAW,CAAC,GAAG,EAAE;QACxC,IAAI,WAAW,EAAE;YACb,WAAW,CAAC,WAAW,CAAC,CAAA;SAC3B;IACL,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAA;IAEjB,MAAM,cAAc,GAAG,WAAW,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;QAC/D,MAAM,GAAG,GAAG,IAAI,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAA;QACnC,OAAO,CACH,oBAAC,IAAI,IAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,CAAC,IAAI,CAAC,EAAE,aAAa,EAAE,CAAC,CAAC,WAAW,GAAI,CAC3F,CAAA;IACL,CAAC,CAAC,CAAA;IAEF,OAAO,CACH,6BACI,KAAK,EAAE,EAAE,OAAO,EAAE,cAAc,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EACvD,OAAO,EAAE,kBAAkB,EAC3B,SAAS,EAAC,UAAU,EACpB,GAAG,EAAE,WAAW,IAEf,cAAc,CACb,CACT,CAAA;AACL,CAAC,CAAA","sourcesContent":["import React, { FC, useCallback } from 'react'\nimport { Word } from './Word'\nimport { useCurrentSubtitle } from '../utils'\nimport { SubtitleStore } from '../store/sources'\n\ninterface Props {\n    currentMillisecond: number\n    isDisplay: boolean\n\n    onTranslate(word: string)\n\n    langKey: keyof SubtitleStore\n    second?: boolean\n}\n\nexport const Subtitle: FC<Props> = ({ onTranslate, isDisplay, langKey }) => {\n    const currentText = useCurrentSubtitle(langKey)?.text\n\n    const handleClick = useCallback((data) => (e) => {\n        e.stopPropagation()\n        e.preventDefault()\n        onTranslate(data\n            .replaceAll('.', '')\n            .replaceAll('?', '')\n            .replaceAll('!', '')\n            .replaceAll(',', ''),\n        )\n    }, [])\n\n    const handleTranslateAll = useCallback(() => {\n        if (onTranslate) {\n            onTranslate(currentText)\n        }\n    }, [currentText])\n\n    const wordComponents = currentText?.split(' ').map((word, index) => {\n        const key = word + index.toString()\n        return (\n            <Word key={key} word={word} onClick={handleClick(word)} needBacklight={!!onTranslate} />\n        )\n    })\n\n    return (\n        <div\n            style={{ opacity: wordComponents && isDisplay ? 1 : 0 }}\n            onClick={handleTranslateAll}\n            className='subtitle'\n            key={currentText}\n        >\n            {wordComponents}\n        </div>\n    )\n}"]}