{"version":3,"file":"VideoControls.js","sourceRoot":"","sources":["../../src/components/VideoControls.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo } from 'react'\nimport { Button, ProgressBar } from 'react-bootstrap'\nimport * as Icon from 'react-bootstrap-icons'\nimport { $settings } from '../store/settrings'\nimport { useStore } from 'effector-react'\nimport { $video } from '../store/video'\n\nconst { onTogglePlay } = $video.action\n\ninterface Props {\n    onToggleFullScreen: () => void\n    onMoveVideoTo: (time: number) => void\n}\n\nconst { onToggleShow, onToggleSubtitleState } = $settings.action\n\nexport const VideoControls: React.FC<Props> = ({ onMoveVideoTo, onToggleFullScreen }) => {\n    const { isPlay, currentMillisecond, duration } = useStore($video.store)\n    const { foreign, native } = useStore($settings.store.settings)\n\n    const handleClickProgressBar = useCallback((event: React.MouseEvent) => {\n        const rect = event.currentTarget.getBoundingClientRect()\n        const x = event.clientX - rect.left\n        const percent = x / (event.currentTarget.clientWidth / 100)\n        onMoveVideoTo((duration / 100) * percent)\n    }, [duration])\n\n    const watchPoint = useMemo(() => {\n        const onePercent = duration / 100\n        return currentMillisecond / onePercent\n    }, [duration, currentMillisecond])\n\n    const handleTogglePlay = useCallback(() => {\n        onTogglePlay()\n    }, [])\n\n    return (\n        <div className='video-controls'>\n            <ProgressBar\n                onClick={handleClickProgressBar}\n                style={{ gridArea: 'progress-bar', cursor: 'pointer' }}\n                now={watchPoint}\n            />\n            <Button size='sm' variant='outline-dark' onClick={handleTogglePlay}>\n                {isPlay ? <Icon.Stop color='white' /> : <Icon.Play color='white' />}\n            </Button>\n            <div></div>\n            <div style={{ display: \"flex\", justifyContent: 'right'}}>\n                <Button size='sm' variant='outline-dark' onClick={() => onToggleSubtitleState(\"foreign\")}>\n                    Foreign: {foreign}\n                </Button>\n                <Button size='sm' variant='outline-dark' onClick={() => onToggleSubtitleState(\"native\")}>\n                    Native: {native}\n                </Button>\n                <Button size='sm' variant='outline-dark' onClick={() => onToggleShow()}>\n                    <Icon.Gear color='white' />\n                </Button>\n                <Button className='pl-1' size='sm' variant='outline-dark' onClick={onToggleFullScreen}>\n                    <Icon.ArrowsFullscreen color='white' />\n                </Button>\n            </div>\n        </div>\n    )\n}"]}