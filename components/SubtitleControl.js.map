{"version":3,"file":"SubtitleControl.js","sourceRoot":"","sources":["../../src/components/SubtitleControl.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from 'react'\nimport { useStore } from 'effector-react'\nimport { $video } from '../store/video'\nimport { $sources, SubtitleStore } from '../store/sources'\nimport { toTime, useCurrentSubtitle } from '../utils'\nimport { ListGroup } from 'react-bootstrap'\nimport { Entry } from '@plussub/srt-vtt-parser/dist/src/types'\nimport { $subtitle } from '../store/subtitle'\n\ninterface Props {\n    langKey: keyof SubtitleStore\n}\n\nexport const SubtitleControl: React.FC<Props> = ({ langKey }) => {\n    const subtitles = useStore($sources.store).subtitle[langKey]\n    const ref = useRef<HTMLDivElement>()\n\n    const currentEntry = useCurrentSubtitle(langKey)\n    useEffect(() => {\n        const index = subtitles.findIndex(s => s.id === currentEntry?.id)\n        ref.current.children[index]?.scrollIntoView({ block: 'center', inline: 'center', behavior: 'smooth' })\n    }, [subtitles, currentEntry])\n\n    return (\n        <ListGroup className='subtitle-control' ref={ref} style={{ maxHeight: 370 }}>\n            {subtitles.map((sources) => (\n                <SubtitleItem\n                    key={sources.id}\n                    langKey={langKey}\n                    sources={sources}\n                    isActive={sources.id === currentEntry?.id}\n                />\n            ))}\n        </ListGroup>\n    )\n}\n\ninterface SubtitleItemProps {\n    sources: Entry\n    isActive: boolean\n    langKey: keyof SubtitleStore\n}\n\nconst SubtitleItem: React.FC<SubtitleItemProps> = ({ sources, isActive, langKey }) => {\n    const ref = useRef<HTMLAnchorElement>()\n    const { currentMillisecond } = useStore($video.store)\n    const currentSubtitleEn = useCurrentSubtitle('en')\n\n    const handleSecondSubtitleId = useCallback(() => {\n        const diffId = parseInt(sources.id) - parseInt(currentSubtitleEn?.id)\n        console.log(diffId)\n        $subtitle.action.setSubtitleIdDiff(diffId)\n    }, [currentSubtitleEn, sources])\n\n    const handleClick = useCallback(() => {\n        handleSecondSubtitleId()\n        if (langKey === 'ru') {\n            return\n        }\n        const diff = sources.from - currentMillisecond\n        $subtitle.action.setSubtitleDiff(diff)\n    }, [currentMillisecond, langKey])\n\n    return (\n        <ListGroup.Item\n            className=\"subtitle-item\"\n            ref={ref}\n            active={isActive}\n            onClick={handleClick}\n        >\n            {sources.id}. {toTime(sources.from)} - {toTime(sources.to)} <br /> {sources.text}\n        </ListGroup.Item>\n    )\n}"]}