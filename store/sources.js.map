{"version":3,"file":"sources.js","sourceRoot":"","sources":["../../src/store/sources.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,UAAU,CAAA;AAErE,OAAO,EAAE,YAAY,EAAE,MAAM,uBAAuB,CAAA;AACpD,OAAO,KAAK,MAAM,OAAO,CAAA;AACzB,OAAO,KAAK,cAAc,MAAM,yBAAyB,CAAA;AAYzD,MAAM,aAAa,GAAG,WAAW,EAAU,CAAA;AAC3C,MAAM,cAAc,GAAG,YAAY,CAA6B,KAAK,EAAE,MAAM,EAAE,EAAE;IAC7E,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAS,MAAM,CAAC,IAAI,CAAC,CAAA;IACrD,MAAM,MAAM,GAAG,cAAc,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA;IAClD,OAAO,MAAM,CAAC,OAAO,CAAA;AACzB,CAAC,CAAC,CAAA;AAEF,MAAM,QAAQ,GAAG,WAAW,CAAgB,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;KAC9D,EAAE,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,KAAK,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;AAEtG,MAAM,QAAQ,GAAG,WAAW,CAAS,IAAI,CAAC,CAAA;AAC1C,OAAO,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAA;AAE9C,MAAM,KAAK,GAAG,OAAO,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAA;AAE7C,MAAM,CAAC,MAAM,QAAQ,GAAG;IACpB,MAAM,EAAE;QACJ,cAAc;QACd,aAAa;KAChB;IACD,KAAK;CACR,CAAA","sourcesContent":["import { combine, createEvent, createStore, forward } from 'effector'\nimport { Entry } from '@plussub/srt-vtt-parser/dist/src/types'\nimport { createEffect } from 'effector/effector.umd'\nimport axios from 'axios'\nimport * as subtitleParser from '@plussub/srt-vtt-parser'\n\nexport interface SubtitleStore {\n    ru: Entry[],\n    en: Entry[],\n}\n\ntype LoadSubtitleParam = {\n    link: string,\n    langKey: keyof SubtitleStore\n}\n\nconst onSetVideoSrc = createEvent<string>()\nconst onLoadSubtitle = createEffect<LoadSubtitleParam, Entry[]>(async (params) => {\n    const response = await axios.get<string>(params.link)\n    const result = subtitleParser.parse(response.data)\n    return result.entries\n})\n\nconst subtitle = createStore<SubtitleStore>({ en: [], ru: [] })\n.on(onLoadSubtitle.done, (store, payload) => ({ ...store, [payload.params.langKey]: payload.result }))\n\nconst videoSrc = createStore<string>(null)\nforward({ from: onSetVideoSrc, to: videoSrc })\n\nconst store = combine({ subtitle, videoSrc })\n\nexport const $sources = {\n    action: {\n        onLoadSubtitle,\n        onSetVideoSrc\n    },\n    store,\n}"]}