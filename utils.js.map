{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { Entry } from '@plussub/srt-vtt-parser/dist/src/types'\nimport dayjs from 'dayjs'\nimport { $sources, SubtitleStore } from './store/sources'\nimport { useStore } from 'effector-react'\nimport { $subtitle } from './store/subtitle'\nimport { $video } from './store/video'\nimport { useMemo } from 'react'\n\nexport const toggleFullScreenForElement = (element: HTMLElement) => {\n    if (document.fullscreenElement) {\n        document.exitFullscreen()\n        return\n    }\n\n    // @ts-ignore\n    if (document.webkitFullscreenElement) {\n        // @ts-ignore\n        document.webkitExitFullscreen()\n        return\n    }\n\n    // @ts-ignore\n    if (element.webkitRequestFullscreen) {\n        // @ts-ignore\n        element.webkitRequestFullscreen()\n    } else {\n        // @ts-ignore\n        element.requestFullscreen()\n    }\n}\n\nexport const getSubtitle = (subtitles: Entry[], currentMillisecond: number, diff: number): Entry => {\n    return subtitles.find(subtitle => {\n        if (!subtitle) {\n            return false\n        }\n        let currentMillisecondWithDuff = currentMillisecond + diff\n        return subtitle.from <= currentMillisecondWithDuff && subtitle.to >= currentMillisecondWithDuff\n    })\n}\n\nexport const toTime = (millisecond: number): string => {\n    return dayjs().startOf('day').add(millisecond, 'milliseconds').format('mm:ss')\n}\n\nexport const toMinute = (millisecond: number): number => {\n    return toSecond(millisecond) / 60\n}\n\n\nexport const toSecond = (millisecond: number): number => {\n    return millisecond / 1000\n}\n\nexport const getNextSub = (currentTimeMilliseconds: number): number => {\n    const subtitle = $sources.store.getState().subtitle.en\n    const timeCods = subtitle.map(item => item.from)\n    const sort = timeCods.filter(timeCod => timeCod > currentTimeMilliseconds).sort((a, b) => a - b)\n    return sort[0]\n}\n\nexport const getLastSub = (currentTimeMilliseconds: number): number => {\n    const subtitle = $sources.store.getState().subtitle.en\n    const currentSubtitle = getSubtitle(subtitle, currentTimeMilliseconds, 0)\n    let currentTime = currentTimeMilliseconds\n    if (currentSubtitle != null) {\n        currentTime = currentSubtitle.from - 1\n    }\n    const timeCods = subtitle.map(item => item.from)\n    const sort = timeCods.filter(timeCod => timeCod < currentTime).sort((a, b) => a - b).reverse()\n    return sort[0]\n}\n\nexport const useCurrentSubtitle = (langKey: keyof SubtitleStore): Entry => {\n    const { subtitleDiff, subtitleIdDiff } = useStore($subtitle.store)\n    const { currentMillisecond } = useStore($video.store)\n    const subtitle = useStore($sources.store).subtitle[langKey]\n\n    return useMemo(() => {\n        return getSubtitle(subtitle, currentMillisecond, subtitleDiff)\n    }, [currentMillisecond, subtitle, subtitleDiff, subtitleIdDiff])\n}\n\nexport const ROUTS = {\n    SELECT_VIDEO: '/',\n    VIDEO: '/video',\n}"]}